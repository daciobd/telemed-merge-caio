datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum BidStatus {
  pending
  accepted_immediate
  accepted_scheduled
  rejected
  expired
  cancelled
  payment_failed
  paid
}

model Bid {
  id               String     @id @default(cuid())
  patientId        String
  specialty        String
  isImmediate      Boolean    @default(true)
  amountCents      Int
  status           BidStatus  @default(pending)
  suggestedCents   Int?
  scheduledFor     DateTime?
  acceptedAt       DateTime?
  createdAt        DateTime   @default(now())
  events           BidEvent[]
  payments         Payment[]

  @@index([status, createdAt])
}

model BidEvent {
  id        String   @id @default(cuid())
  bidId     String
  type      String               // created | updated | accepted | rejected | paid | ...
  payload   Json?
  createdAt DateTime @default(now())
  bid       Bid      @relation(fields: [bidId], references: [id], onDelete: Cascade)

  @@index([bidId])
}

model PhysicianSettings {
  id                         String   @id @default(cuid())
  specialty                  String   @unique
  minPriceImmediateCents     Int      @default(8000)
  minPriceScheduledCents     Int      @default(6000)
  isAcceptingBids            Boolean  @default(true)
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
}

model Payment {
  id            String   @id @default(cuid())
  bidId         String   // Campo obrigatório (não nullable)
  amountCents   Int
  status        String
  provider      String?
  providerRef   String?
  createdAt     DateTime @default(now())
  // Altere a relação para usar onDelete: Cascade
  bid           Bid      @relation(fields: [bidId], references: [id], onDelete: Cascade)

  @@index([bidId])
}
