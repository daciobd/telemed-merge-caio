services:
- type: redis
  name: telemed-cache
  plan: starter
  ipAllowList: []

- type: web
  name: telemed-deploy-ready
  env: python
  branch: main
  rootDir: apps/telemed-deploy-ready
  plan: starter
  buildCommand: ''
  startCommand: python -m http.server $PORT
  healthCheckPath: /
  autoDeploy: true
  envVars:
    - key: VITE_AUCTION_URL
      value: https://telemed-auction.onrender.com
    - key: VITE_PRODUCTIVITY_URL
      value: https://telemed-productivity.onrender.com
    - key: VITE_DOCS_AUTOMATION_URL
      value: https://telemed-docs-automation.onrender.com

- type: web
  name: telemed-auction
  env: node
  branch: main
  rootDir: apps/auction-service
  plan: starter
  buildCommand: npm ci || npm install && npx prisma generate
  startCommand: npm run start
  healthCheckPath: /healthz
  autoDeploy: true
  envVars:
    - key: DATABASE_URL
      fromService:
        name: telemed-db
        type: postgresql
        property: connectionString
    - key: REDIS_URL
      fromService:
        name: telemed-cache
        type: redis
        property: connectionString
    - key: JWT_SECRET
      value: change-me
    - key: INTERNAL_TOKEN
      value: change-me-internal
    - key: PUBLIC_BASE_URL
      value: https://telemed-deploy-ready.onrender.com
    - key: FRONTEND_ORIGIN
      value: https://telemed-deploy-ready.onrender.com
    - key: AUCTION_ENABLED
      value: 'true'
    - key: AUCTION_IMMEDIATE_EXPIRES_MIN
      value: '15'
    - key: AUCTION_MIN_PRICE_DEFAULT_IMMEDIATE_CENTS
      value: '8000'
    - key: AUCTION_MIN_PRICE_DEFAULT_SCHEDULED_CENTS
      value: '6000'
    - key: PAYMENTS_PROVIDER
      value: mock
    - key: INTERNAL_URL_TELEMED
      value: https://telemed-internal.onrender.com

- type: web
  name: telemed-internal
  env: node
  branch: main
  rootDir: apps/telemed-internal
  plan: starter
  buildCommand: npm ci || npm install && npx prisma generate
  startCommand: npm run start
  healthCheckPath: /healthz
  autoDeploy: true
  envVars:
    - key: DATABASE_URL
      fromService:
        name: telemed-db
        type: postgresql
        property: connectionString
    - key: INTERNAL_TOKEN
      value: change-me-internal
    - key: FRONTEND_ORIGIN
      value: https://telemed-deploy-ready.onrender.com

- type: web
  name: telemed-productivity
  env: node
  branch: main
  rootDir: apps/productivity-service
  plan: starter
  buildCommand: npm ci || npm install && npx prisma generate
  startCommand: npm run start
  healthCheckPath: /healthz
  autoDeploy: true
  envVars:
    - key: DATABASE_URL
      fromService:
        name: telemed-db
        type: postgresql
        property: connectionString
    - key: JWT_SECRET
      value: change-me
    - key: FRONTEND_ORIGIN
      value: https://telemed-deploy-ready.onrender.com
    - key: OPENAI_API_KEY
      value: ''
    - key: OPENAI_WHISPER_MODEL
      value: whisper-1
    - key: OPENAI_LLM_MODEL
      value: gpt-4o-mini

- type: web
  name: telemed-docs-automation
  env: node
  branch: main
  rootDir: apps/telemed-docs-automation
  plan: starter
  buildCommand: npm ci || npm install && npm run build
  startCommand: npm run start
  healthCheckPath: /healthz
  autoDeploy: true
  envVars:
    - key: CORS_ORIGINS
      value: https://telemed-deploy-ready.onrender.com
    - key: INTERNAL_TOKEN
      value: change-me-internal
    - key: RECEITA_CERTA_API_URL
      value: https://api.receitacerta.example/v1
    - key: RECEITA_CERTA_API_KEY
      value: changeme
    - key: NOTIFY_EMAIL_FROM
      value: no-reply@telemed.app
    - key: NOTIFY_WHATSAPP_PROVIDER
      value: twilio
    - key: NOTIFY_WHATSAPP_FROM
      value: whatsapp:+10000000000

# Note: PostgreSQL database needs to be created manually in Render dashboard
# After creating, reference it in the envVars above using fromService